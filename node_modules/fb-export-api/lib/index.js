const qs = require('querystring')
const https = require('https')
const date = ~~(Date.now() / 1000)

exports.init = (client_id, client_secret) => new Promise((resolve, reject) => {
  const path = `/oauth/access_token?${qs.stringify({
    client_id, client_secret, 'grant_type': 'client_credentials'})}`
  api({ path })
    .then((access_token) => resolve({ access_token, client_id }))
})

exports.download = (data, period) => new Promise((resolve, reject) => {
  makeRequest(data, period)
    .then((id) => getFile(id, data.client_id))
    .then((parameters) => downloadFile(parameters))
    .then((result) => resolve(result))
    .catch((err) => errorResponse(err, data, false, reject))
})

const makeRequest = (data, period = {
  end: date,
  start: date - 86400
}) => new Promise((resolve, reject) => {
  const access_token = data.access_token.split('access_token=')[1]
  api(
    { path: `/v2.8/${data.client_id}/analytics_app_events_exports`, method: 'POST' },
    { access_token, 'start_ts': `${period.start}`, 'end_ts': `${period.end}` })
    .then((id) => resolve({id, access_token}))
    .catch((err) => errorResponse(err, data, access_token, reject))
})

const getFile = (data, client_id) => new Promise((resolve, reject) => {
  let cnt = 0
  const id = JSON.parse(data.id).id
  const access_token = data.access_token
  const tries = 60
  const interval = 120e3
  ;(function poll () {
    api({ path: `/v2.8/${id}?access_token=${access_token}` })
      .then((result) => {
        result = JSON.parse(result)
        console.log(`query is ${result.status} for ${cnt * 2} mins`)
        if (result.status !== 'SCHEDULED' && result.status !== 'RUNNING') {
          resolve(qs.stringify({access_token, id, filename: 'output.gz'}))
        } else if (cnt < tries) {
          if (result.status === 'RUNNING') cnt = 0
          cnt++
          setTimeout(poll, interval)
        } else { reject('timed out for :' + arguments) }
      })
      .catch((err) => errorResponse(err, client_id, access_token, reject))
  })()
})

const downloadFile = (parameters) => new Promise((resolve, reject) => {
  const options = {
    host: 'lookaside.fbsbx.com',
    path: `/analytics/app_events_export/download?${parameters}`,
    headers: {'user-agent': 'fb-export-api/'}
  }
  https.get(options, (res) => resolve(res))
    .on('error', (e) => errorResponse(e, parameters, false, reject))
})

const api = (opts, payload) => new Promise((resolve, reject) => {
  opts.host || (opts.host = 'graph.facebook.com')
  opts.headers || (opts.headers = {})
  const req = https.request(opts, res => {
    var data = ''
    res.on('data', chunk => { data += chunk })
    res.on('end', () => {
      if (data !== Error) {
        if (data && typeof data.status === 'number' && data.status < 600) {
          res.statusCode = data.status
        } else if (res.statusCode < 300) {
          resolve(data)
        } else { errorResponse(data, payload, opts, reject) }
      }
    })
  }).on('error', (error) => errorResponse(error, payload, opts, reject))
  payload && req.write(qs.stringify(payload))
  req.end()
})

const errorResponse = (error, payload, opts, reject) => {
  const err = new Error(`fb error response from (${opts.path}) saying ${error}`)
  err.error = JSON.parse(error)
  err.opts = opts
  err.payload = payload
  console.log(error)
  reject(err)
}
